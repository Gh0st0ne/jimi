{"version":3,"sources":["utils/session.js","utils/api.js","components/login.component.js","utils/publicRoute.js","utils/privateRoute.js","components/conductItem.component.js","components/status.component.js","pages/status.page.js","pages/myAccount.page.js","components/conductList.component.js","pages/conducts.page.js","pages/conduct.page.js","pages/conductSettings.page.js","components/pluginItem.component.js","components/pluginList.component.js","pages/plugins.page.js","pages/plugin.page.js","pages/modelEditor.page.js","pages/codify.page.js","components/clusterItem.component.js","components/clusterList.component.js","components/clusterJobItem.component.js","components/clusterJobList.component.js","pages/admin.page.js","pages/cleanup.page.js","components/topbar.component.js","App.js","index.js"],"names":["isActiveSession","sessionStorage","getItem","getSessionCSRF","removeSession","Cookies","remove","setItem","removeItem","setSession","CSRF","URL","domain","window","location","hostname","port","Logout","props","fetch","method","credentials","history","useHistory","setTimeout","push","className","Login","state","username","password","otpRequired","otp","failedLogin","submit","bind","change","event","preventDefault","this","setState","requestOptions","body","JSON","stringify","then","response","ok","catch","error","json","target","value","name","type","checked","hobbies","splice","onSubmit","placeholder","autoComplete","onChange","Component","PublicRoute","component","rest","render","PrivateRoute","PollAuth","to","pathname","from","ConductItem","d","Date","setUTCSeconds","lastUpdateTime","href","id","title","toLocaleString","onClick","e","deleteConductClickHandler","StatusItem","now","enabled","startCheck","maxDuration","lastCheck","StatusList","triggers","map","c","_id","apiTriggerStatusRefresh","StatusPage","mounted","updateTriggers","MyAccountPage","password1","password2","updated","updateFailed","msg","loading","data","disabled","ConductList","conducts","filter","conduct","toLowerCase","includes","ConductsPage","DeleteConduct","NewConduct","confirm","console","log","ConductPage","search","conductID","URLSearchParams","get","test","src","ConductSettingsPage","status","comment","updateStatus","edit","reload","PluginItem","PluginList","plugins","plugin","PluginsPage","PluginPage","pluginName","ModelEditorPage","CodifyPage","ClusterJobItem","lastSyncTime","systemID","systemUID","bindSecure","bindAddress","bindPort","syncCount","master","ClusterList","clusterMembers","startTime","server","ClusterJobList","jobs","createdTime","apiClusterMembersRefresh","apiJobsRefresh","AdminPage","updateclusterMembers","updateClusterMembers","updateJobs","clearCache","clearStartChecks","redistributeCluster","deleteUnusedObjects","alert","CleanupPage","configData","url","Topbar","class","exact","activeClassName","path","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e1a315e1.chunk.js","sourcesContent":["import { Cookies } from 'react-cookie';\r\n\r\n// return if the session is active\r\nexport const isActiveSession = () => {\r\n  return sessionStorage.getItem('active') || true;\r\n}\r\n\r\n// return session CSRF\r\nexport const getSessionCSRF = () => {\r\n  return sessionStorage.getItem('CSRF') || null;\r\n}\r\n  \r\n// remove the session storage\r\nexport const removeSession = () => {\r\n  const cookies = new Cookies();\r\n  cookies.remove(\"jimiAuth\");\r\n  sessionStorage.setItem('active', false);\r\n  sessionStorage.removeItem('CSRF');\r\n}\r\n  \r\n// set the token and user from the session storage\r\nexport const setSession = (CSRF) => {\r\n  sessionStorage.setItem('active', true);\r\n  sessionStorage.setItem('CSRF', CSRF);\r\n}","export const URL = () => {\r\n  var domain = window.location.hostname;\r\n  var port = window.location.port;\r\n  if (domain === \"localhost\" && port === \"3000\") {\r\n    return \"http://127.0.0.1:5002/api/1.0/\";\r\n  }\r\n  return \"/api/1.0/\";\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport configData from \"./../config/config.json\";\r\nimport { URL } from\"./../utils/api\";\r\n\r\n\r\nimport { setSession, removeSession, isActiveSession } from './../utils/session';\r\n\r\nimport \"./html.component.css\"\r\nimport \"./login.component.css\"\r\n\r\nexport function PollAuth(props) {\r\n    const history = useHistory();\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        credentials: 'include'\r\n    };\r\n    fetch(URL()+'auth/poll/', requestOptions).then(response => {\r\n        if (response.ok) {\r\n            return response.json();\r\n        }\r\n        throw response;\r\n    }).then(response => {\r\n        setSession(response[\"CSRF\"]);\r\n    }).catch(error => {\r\n        removeSession();\r\n        history.push('/login');\r\n    });\r\n}\r\n\r\nexport function Logout(props) {   \r\n    const requestOptions = {\r\n        method: 'GET',\r\n        credentials: 'include'\r\n    };\r\n    fetch(URL()+'auth/logout/', requestOptions);\r\n    removeSession();\r\n    const history = useHistory()\r\n    setTimeout(() => { history.push('/login'); }, 2500);\r\n    return (\r\n        <div className=\"fullscreen\">\r\n            <h1>jimi</h1>\r\n            <div className=\"outer\">\r\n                <div className=\"inner\">\r\n                    <h3>Successfully logged out</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport class Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: null,\r\n            password: null,\r\n            otpRequired: false,\r\n            otp: null,\r\n            failedLogin: false\r\n        }\r\n        this.submit = this.submit.bind(this);\r\n        this.change = this.change.bind(this);\r\n    }\r\n\r\n    submit(event) {\r\n        event.preventDefault();\r\n        this.setState({ failedLogin: false });\r\n\r\n        if (!this.state.otpRequired) {\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                body: JSON.stringify({ username: this.state.username, password: this.state.password })\r\n            };\r\n            fetch(URL()+'auth/', requestOptions).then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                throw response;\r\n            }).then(response => {\r\n                setSession(response[\"CSRF\"]);\r\n                this.props.history.push('/'); \r\n            }).catch(error => { \r\n                this.setState({ otpRequired: true });\r\n            });\r\n        } else {\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                body: JSON.stringify({ username: this.state.username, password: this.state.password, otp: this.state.otp })\r\n            };\r\n            fetch(URL()+'auth/', requestOptions).then(response => {\r\n                if (response.ok) return response;\r\n                throw response;\r\n            }).then(response => {\r\n                this.props.history.push('/index'); \r\n            }).catch(error => { \r\n                this.setState({ otpRequired: false });\r\n                this.setState({ failedLogin: true });\r\n            });\r\n        }\r\n    }\r\n\r\n    change(event) {\r\n        const target = event.target;\r\n        var value = target.value;\r\n        const name = target.name;\r\n        if (target.type === 'checkbox') {\r\n            if (target.checked) {\r\n                this.state.hobbies[value] = value;   \r\n            } else {\r\n                this.state.hobbies.splice(value, 1);\r\n            }\r\n        } else {\r\n            this.setState({ [name]: value });\r\n        }   \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"fullscreen\">\r\n                <h1>jimi</h1>\r\n                <div className=\"outer\">\r\n                    <div className={`inner ${!this.state.failedLogin ? \"\" : \"shake\"}`}>\r\n                        <form onSubmit={this.submit}>\r\n                            <h3>Login</h3>\r\n                            {this.state.failedLogin ? <p className=\"failedLoginAlert\"><b>Login details appear to be invalid!</b></p> : <p className=\"failedLoginAlert\"><b>&#160;</b></p> }\r\n                            <div className=\"form-group\">\r\n                                <input type=\"text\" name=\"username\" className=\"form-control textbox\" placeholder=\"Username\" autoComplete=\"off\" onChange={this.change} />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <input type=\"password\" name=\"password\" className=\"form-control textbox\" placeholder=\"password\" autoComplete=\"off\" onChange={this.change} />\r\n                            </div>\r\n\r\n                            {this.state.otpRequired &&\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\" name=\"otp\" className=\"form-control textbox\" placeholder=\"One Time Password\" autoComplete=\"off\" onChange={this.change} />\r\n                                </div>\r\n                            }\r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary btn-block button\">Login</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { PollAuth } from './../components/login.component'\r\n\r\nimport { isActiveSession } from './../utils/session';\r\n \r\n// handle the public routes\r\nfunction PublicRoute({ component: Component, ...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => <Component {...props} /> }\r\n    />\r\n  )\r\n}\r\n \r\nexport default PublicRoute;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { PollAuth } from './../components/login.component'\r\n\r\nimport { isActiveSession } from './../utils/session';\r\n\r\n// handle the private routes\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n  PollAuth();\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => isActiveSession() ? <Component {...props} /> : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />}\r\n    />\r\n  )\r\n}\r\n \r\nexport default PrivateRoute;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./html.component.css\"\r\nimport \"./conductItem.component.css\"\r\n\r\n\r\n\r\nfunction ConductItem(props) {\r\n    var d = new Date(0);\r\n    d.setUTCSeconds(props.lastUpdateTime)\r\n    return (\r\n        <div className=\"conductItemContainer\">\r\n            <div className=\"conductItem\">\r\n                <div className=\"conductLeft\">\r\n                    <a className=\"conductTitle\" href={\"/conduct/?conductID=\"+props.id} title={props.name}>\r\n                        {props.name}\r\n                    </a>\r\n                    <p className=\"conductState\">\r\n                        State: {props.state}\r\n                    </p>\r\n                </div>\r\n                <div className=\"conductRight\">\r\n                    <p className=\"conductLastEdit\">\r\n                        Last Edit: {d.toLocaleString()}\r\n                    </p>\r\n                    <br/>\r\n                    <div className=\"conductRightLinks\">\r\n                        <a className=\"conductDeleteLink\" onClick={(e) => props.deleteConductClickHandler(e,props.id,props.name)}>\r\n                            Delete\r\n                        </a>\r\n                        <p className=\"conductRightOptions\">\r\n                            /\r\n                        </p>\r\n                        <a className=\"conductEditLink\" href={\"/conductSettings/?conductID=\" + props.id + \"&edit=True\"}>\r\n                            Edit\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConductItem;","import React, { Component } from \"react\";\r\nimport ConductItem from \"./conductItem.component\"\r\n\r\nimport \"./html.component.css\"\r\nimport \"./status.component.css\"\r\n\r\nfunction StatusItem(props) {\r\n    const now = Date.now()/1000;\r\n    return (\r\n        <div className=\"statusItemContainer\">\r\n            <div className={`statusItem ${props.enabled ? \"statusItemEnabled\" : \"\"} ${ ((props.startCheck > 0 && props.startCheck + props.maxDuration > now) || props.lastCheck + 2.5 > now) ? \"statusItemRunning\" : \"\"} ${props.enabled && props.startCheck > 0 && props.startCheck + props.maxDuration < now  ? \"statusItemCrashed\" : \"\"} `} title={props.name}>\r\n            </div>       \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction StatusList(props) {\r\n    return (\r\n        <div>\r\n            {props.triggers.map(c => <StatusItem key={c._id} name={c.name} enabled={c.enabled} startCheck={c.startCheck} lastCheck={c.lastCheck} maxDuration={c.maxDuration == 0 ? 60 : c.maxDuration} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatusList;","import React, { Component } from \"react\";\r\n\r\nimport configData from \"./../config/config.json\";\r\nimport { URL } from\"./../utils/api\";\r\n\r\nimport StatusList from \"./../components/status.component\"\r\n\r\nimport \"./status.page.css\"\r\n\r\nfunction apiTriggerStatusRefresh() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        credentials: 'include',\r\n    };\r\n    var triggers = fetch(URL()+'models/trigger/all/', requestOptions).then(response => {\r\n        if (response.ok) {\r\n            return response.json()\r\n        }\r\n    }).then(json => {\r\n        return json[\"results\"];\r\n    });\r\n    return triggers\r\n}\r\n\r\nexport default class StatusPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            triggers : []\r\n        }\r\n\r\n        this.mounted = true;\r\n\r\n        this.updateTriggers = this.updateTriggers.bind(this);\r\n\r\n        apiTriggerStatusRefresh().then(triggers => {\r\n            this.setState({ triggers : triggers });\r\n            this.updateTriggers();\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    updateTriggers() {\r\n        if (this.mounted) {\r\n            setTimeout(() => {\r\n                apiTriggerStatusRefresh().then(triggers => {\r\n                    this.setState({ triggers : triggers });\r\n                    this.updateTriggers();\r\n                })\r\n            }, 2500 );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent1\">\r\n                <h1>Trigger Status</h1>\r\n                <br/>\r\n                <div className=\"pageCenter-outer\">\r\n                    <div className=\"pageCenter-inner\">\r\n                        <StatusList triggers={this.state.triggers} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport { getSessionCSRF } from './../utils/session';\r\n\r\nimport configData from \"./../config/config.json\";\r\nimport { URL } from\"./../utils/api\";\r\n\r\nimport \"./../components/html.component.css\"\r\nimport \"./myAccount.page.css\"\r\n\r\nexport default class MyAccountPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: null,\r\n            name: null,\r\n            password: \"\",\r\n            password1: \"\",\r\n            password2: \"\",\r\n            updated: false,\r\n            updateFailed: false,\r\n            msg: \"\",\r\n            loading: true\r\n        }\r\n        this.change = this.change.bind(this);\r\n        this.submit = this.submit.bind(this);\r\n\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n        };\r\n        fetch(URL()+'auth/myAccount/', requestOptions).then(response => {\r\n            if (response.ok) {\r\n                return response.json()\r\n            }\r\n        }).then(json => {\r\n            this.setState({ \"username\" : json[\"username\"], \"name\" : json[\"name\"], \"loading\" : false })\r\n        });\r\n    }\r\n\r\n    submit(event) {\r\n        event.preventDefault();\r\n        if (this.state.password1 !== this.state.password2) {\r\n            this.setState({ msg: \"Passwords do not match\" })\r\n            this.setState({ updateFailed: true });\r\n            setTimeout(() => { this.setState({ updateFailed: false }) }, 1000);\r\n            return\r\n        }\r\n        var data = { CSRF: getSessionCSRF(), name: this.state.name }\r\n        if (this.state.password1 !== \"\")\r\n        {\r\n            data[\"password\"] = this.state.password\r\n            data[\"password1\"] = this.state.password1\r\n        }\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            body: JSON.stringify(data)\r\n        };\r\n        fetch(URL()+'auth/myAccount/', requestOptions).then(response => {\r\n            if (response.ok) return response;\r\n            throw response;\r\n        }).then(response => {\r\n            this.setState({ msg: \"Saved\" })\r\n            this.setState({ updated: true })\r\n            setTimeout(() => { this.setState({ updated: false }) }, 1000);\r\n        }).catch(error => { \r\n            this.setState({ msg: \"Error: Could not save data\" })\r\n            this.setState({ updateFailed: true });\r\n        });\r\n    }\r\n\r\n    change(event) {\r\n        this.setState({ updateFailed: false, msg: \"\" });\r\n        const target = event.target;\r\n        var value = target.value;\r\n        const name = target.name;\r\n        if (target.type === 'checkbox') {\r\n            if (target.checked) {\r\n                this.state.hobbies[value] = value;   \r\n            } else {\r\n                this.state.hobbies.splice(value, 1);\r\n            }\r\n        } else {\r\n            this.setState({ [name]: value });\r\n        }   \r\n    }\r\n\r\n    render() {\r\n        return !this.state.loading ? (\r\n            <div className=\"pageContent2\">\r\n                <form onSubmit={this.submit}>\r\n                    <h3>Your Details</h3>\r\n                    <br/><br/>\r\n                    <div className=\"form-group\">\r\n                        General Details\r\n                        <hr/>\r\n                    </div>                    \r\n                    <div className=\"form-group\">\r\n                        Username:\r\n                        <br/>\r\n                        <input type=\"text\" name=\"username\" className=\"form-control textbox\" autoComplete=\"off\" value={this.state.username} disabled=\"true\" onChange={this.change} />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        Name:\r\n                        <br/>\r\n                        <input type=\"text\" name=\"name\" className=\"form-control textbox\" autoComplete=\"off\" value={this.state.name} onChange={this.change} />\r\n                    </div>\r\n                    <br/>\r\n\r\n                    <div className=\"form-group\">\r\n                        Change Password\r\n                        <hr/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        Current Password:\r\n                        <br/>\r\n                        <input type=\"password\" name=\"password\" className=\"form-control textbox\" autoComplete=\"off\" onChange={this.change} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        New Password:\r\n                        <br/>\r\n                        <input type=\"password\" name=\"password1\" className={`form-control textbox ${this.state.msg == \"Passwords do not match\" ? \"alertErrorBorder\" : \"\"}`} autoComplete=\"off\" onChange={this.change} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        Confirm New Password:\r\n                        <br/>\r\n                        <input type=\"password\" name=\"password2\" className={`form-control textbox ${this.state.msg == \"Passwords do not match\" ? \"alertErrorBorder\" : \"\"}`} autoComplete=\"off\" onChange={this.change} />\r\n                    </div>\r\n\r\n                    <br/>\r\n                    <button type=\"submit\" className={`btn btn-primary btn-block button small ${!this.state.updated ? \"\" : \"saved\"} ${!this.state.updateFailed ? \"\" : \"error\"}`}>Update</button>\r\n                    <p className={`resultMessage ${!this.state.updateFailed ? \"alert\" : \"alertError\"} ${!this.state.updated && !this.state.updateFailed ? \"hide\" : \"\"}`}><b>{this.state.msg}</b></p>\r\n                </form>\r\n            </div>\r\n        ) : <span>Loading page...</span>\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport ConductItem from \"./conductItem.component\"\r\n\r\nimport \"./html.component.css\"\r\nimport \"./conductList.component.css\"\r\n\r\nfunction ConductList(props) {\r\n    return (\r\n        <div>\r\n            {props.conducts.filter(conduct => conduct.name.toLowerCase().includes(props.filter.toLowerCase())).map(c => <ConductItem key={c._id} id={c._id} name={c.name} lastUpdateTime={c.lastUpdateTime} state={c.enabled ? \"Enabled\" : \"Disabled\"} deleteConductClickHandler={props.deleteConductClickHandler} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConductList;","import React, { Component } from \"react\";\r\n\r\nimport { getSessionCSRF } from './../utils/session';\r\n\r\nimport configData from \"./../config/config.json\";\r\n\r\nimport { URL } from\"./../utils/api\";\r\n\r\nimport ConductList from \"./../components/conductList.component\"\r\n\r\nimport \"./conducts.page.css\"\r\n\r\nexport default class ConductsPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            conducts: [],\r\n            filter: \"\"\r\n        }\r\n\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n        };\r\n        fetch(URL()+'conducts/', requestOptions).then(response => {\r\n            if (response.ok) {\r\n                return response.json()\r\n            }\r\n        }).then(json => {\r\n            this.setState({ conducts : json[\"results\"] });\r\n        });\r\n\r\n        this.change = this.change.bind(this);\r\n        this.DeleteConduct = this.DeleteConduct.bind(this);\r\n        this.NewConduct = this.NewConduct.bind(this);\r\n    }\r\n\r\n    NewConduct() {\r\n        this.props.history.push('/conductSettings/');\r\n    }\r\n\r\n    DeleteConduct(e,id,name) {\r\n        if (window.confirm(\"Please confirm removal of conduct named \"+name)) {\r\n            const requestOptions = {\r\n                method: 'DELETE',\r\n                credentials: 'include',\r\n                body: JSON.stringify({ CSRF: getSessionCSRF() })\r\n            };\r\n            fetch(URL()+'models/conduct/' + id + \"/\", requestOptions).then(response => {\r\n                if (response.ok) {\r\n                    this.setState({ conducts: this.state.conducts.filter(conduct => conduct._id !== id) });\r\n                }\r\n                throw response;\r\n            }).catch(error => {\r\n                console.log(\"Could not delete conduct: \" + id)\r\n            });\r\n        }\r\n    }\r\n\r\n    change(event) {\r\n        const target = event.target;\r\n        var value = target.value;\r\n        const name = target.name;\r\n        if (target.type === 'checkbox') {\r\n            if (target.checked) {\r\n                this.state.hobbies[value] = value;   \r\n            } else {\r\n                this.state.hobbies.splice(value, 1);\r\n            }\r\n        } else {\r\n            this.setState({ [name]: value });\r\n        }   \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent1\">\r\n                <div>\r\n                    <input type=\"text\" name=\"filter\" className=\"form-control textbox conductSearch\" placeholder=\"Search Conducts\" onChange={this.change} />\r\n                    <button className=\"btn btn-primary btn-block button conductNew\" onClick={this.NewConduct}>+ Create New</button>\r\n                </div>\r\n                <br/>\r\n                <div>\r\n                    <ConductList conducts={this.state.conducts} filter={this.state.filter} deleteConductClickHandler={this.DeleteConduct} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nimport configData from \"./../config/config.json\";\r\n\r\nimport \"./conduct.page.css\"\r\n\r\nexport default class ConductPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            location : \"\"\r\n        }\r\n\r\n        const search = props.location.search;\r\n        const conductID = new URLSearchParams(search).get('conductID');\r\n        if (/^[A-Za-z0-9]+$/.test(conductID)) {\r\n            this.state.location = conductID;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent0\">\r\n                <iframe className=\"conductFrame\" src={\"/conductEditor/?conductID=\"+this.state.location}></iframe>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nimport { getSessionCSRF } from './../utils/session';\r\n\r\nimport configData from \"./../config/config.json\";\r\nimport { URL } from\"./../utils/api\";\r\n\r\n\r\nimport \"./../components/html.component.css\"\r\nimport \"./conductSettings.page.css\"\r\n\r\nexport default class ConductSettingsPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            type: \"New\",\r\n            name: \"\",\r\n            status: false,\r\n            comment: \"\",\r\n            loading: true,\r\n            updateStatus: { \"id\" : null, \"msg\" : \"\" } \r\n        }\r\n        this.change = this.change.bind(this);\r\n        this.submit = this.submit.bind(this);\r\n\r\n        const search = props.location.search;\r\n        const conductID = new URLSearchParams(search).get('conductID');\r\n        const edit = new URLSearchParams(search).get('edit');\r\n        if (edit === \"True\") {\r\n            const requestOptions = {\r\n                method: 'GET',\r\n                credentials: 'include',\r\n            };\r\n            fetch(URL()+'models/conduct/'+conductID+\"/\", requestOptions).then(response => {\r\n                if (response.ok) {\r\n                    return response.json()\r\n                }\r\n            }).then(json => {\r\n                this.setState({ \"name\" : json[\"name\"], \"status\" : json[\"status\"], \"comment\" : json[\"comment\"], \"type\" : \"Update\", \"loading\" : false })\r\n            });\r\n        } else {\r\n            this.state[\"loading\"] = false;\r\n        }\r\n    }\r\n\r\n    submit(event) {\r\n        event.preventDefault();\r\n        const search = this.props.location.search;\r\n        const conductID = new URLSearchParams(search).get('conductID');\r\n        const edit = new URLSearchParams(search).get('edit');\r\n        var data = { CSRF: getSessionCSRF(), name: this.state.name, comment: this.state.comment, enabled: this.state.enabled }\r\n        if (edit === \"True\") {\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                credentials: 'include',\r\n                body: JSON.stringify(data)\r\n            };\r\n            fetch(URL()+'models/conduct/'+conductID+\"/\", requestOptions).then(response => {\r\n                if (response.ok) return response;\r\n                throw response;\r\n            }).then(response => {\r\n                \r\n            }).catch(error => { \r\n                \r\n            });\r\n        } else {\r\n            const requestOptions = {\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                body: JSON.stringify({ CSRF: getSessionCSRF() })\r\n            };\r\n            fetch(URL()+'models/conduct/', requestOptions).then(response => {\r\n                if (response.ok) return response.json();\r\n                throw response;\r\n            }).then(response => {\r\n                // put returns an ID number that can then be used to push the data within the form to - this is a two step process\r\n                requestOptions[\"method\"] = \"POST\"\r\n                requestOptions[\"body\"] = JSON.stringify(data)\r\n                var conductID = response[\"_id\"]\r\n                fetch(URL()+'models/conduct/'+conductID+\"/\", requestOptions).then(response => {\r\n                    if (response.ok) return response;\r\n                    throw response;\r\n                }).then(response => {\r\n                    this.props.history.push('?conductID='+conductID+'&edit=True');\r\n                    // Force reload of this screen\r\n                    window.location.reload(false);\r\n                }).catch(error => { \r\n                    \r\n                });\r\n            }).catch(error => { \r\n                \r\n            });\r\n        }\r\n    }\r\n\r\n    change(event) {\r\n        this.setState({ updateFailed: false, msg: \"\" });\r\n        const target = event.target;\r\n        var value = target.value;\r\n        const name = target.name;\r\n        if (target.type === 'checkbox') {\r\n            if (target.checked) {\r\n                this.state.hobbies[value] = value;   \r\n            } else {\r\n                this.state.hobbies.splice(value, 1);\r\n            }\r\n        } else {\r\n            this.setState({ [name]: value });\r\n        }   \r\n    }\r\n\r\n    render() {\r\n        return !this.state.loading ? (\r\n            <div className=\"pageContent2\">\r\n                <form onSubmit={this.submit}>\r\n                    <h3>Conduct Details</h3>\r\n                    <br/><br/>\r\n                    <div className=\"form-group\">\r\n                        General Details\r\n                        <hr/>\r\n                    </div>                    \r\n                    <div className=\"form-group\">\r\n                        Name:\r\n                        <input type=\"text\" name=\"name\" className=\"form-control textbox\" autoComplete=\"off\" value={this.state.name} onChange={this.change} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        Comment:\r\n                        <textarea type=\"text\" name=\"comment\" className=\"form-control textarea\" autoComplete=\"off\" value={this.state.comment} onChange={this.change} />\r\n                    </div>\r\n                    <br/>\r\n\r\n                    <br/>\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-block button small\">{this.state.type}</button>\r\n                </form>\r\n            </div>\r\n        ) : <span>Loading page...</span>\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./html.component.css\"\r\nimport \"./pluginItem.component.css\"\r\n\r\nfunction PluginItem(props) {\r\n    return (\r\n        <div className=\"pluginItemContainer\">\r\n            <a className=\"pluginLink\" href={\"plugin/?pluginName=\"+props.name}>\r\n                <div className=\"pluginItem\">\r\n                    <span className=\"pluginTitle\">{props.name}</span>\r\n                </div>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nPluginItem.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n};\r\n\r\nexport default PluginItem;","import React, { Component } from \"react\";\r\nimport PluginItem from \"./pluginItem.component\"\r\n\r\nimport \"./html.component.css\"\r\nimport \"./pluginList.component.css\"\r\n\r\nfunction PluginList(props) {\r\n    return (\r\n        <div>\r\n            {props.plugins.filter( plugin => plugin.name.toLowerCase().includes(props.filter.toLowerCase())).map( c=> <PluginItem key={c._id} name={c.name} />) }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PluginList;","import React, { Component } from \"react\";\r\n\r\nimport configData from \"./../config/config.json\";\r\nimport { URL } from\"./../utils/api\";\r\n\r\nimport PluginList from \"./../components/pluginList.component\"\r\n\r\nimport \"./plugins.page.css\"\r\n\r\nexport default class PluginsPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            plugins : [],\r\n            filter: \"\"\r\n        }\r\n\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n        };\r\n        fetch(URL()+'plugins/', requestOptions).then(response => {\r\n            if (response.ok) {\r\n                return response.json()\r\n            }\r\n        }).then(json => {\r\n            this.setState({ plugins : json[\"results\"] });\r\n        });\r\n\r\n        this.change = this.change.bind(this);\r\n    }\r\n\r\n    change(event) {\r\n        const target = event.target;\r\n        var value = target.value;\r\n        const name = target.name;\r\n        if (target.type === 'checkbox') {\r\n\r\n        } else {\r\n            this.setState({ [name]: value });\r\n        }   \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent1\">\r\n                <div>\r\n                    <input type=\"text\" name=\"filter\" className=\"form-control textbox pluginSearch\" placeholder=\"Search Plugins\" onChange={this.change} />\r\n                </div>\r\n                <br/>\r\n                <div className=\"pageCenter-outer\">\r\n                    <div className=\"pageCenter-inner\">\r\n                        <PluginList plugins={this.state.plugins} filter={this.state.filter} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nimport configData from \"./../config/config.json\";\r\nimport { URL } from\"./../utils/api\";\r\n\r\n\r\nimport \"./plugin.page.css\"\r\n\r\nexport default class PluginPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            location : \"\"\r\n        }\r\n\r\n        const search = props.location.search;\r\n        const pluginName = new URLSearchParams(search).get('pluginName');\r\n        if (/^[A-Za-z]+$/.test(pluginName)) {\r\n            this.state.location = pluginName;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent0\">\r\n                <iframe className=\"pluginFrame\" src={\"/plugin/\"+this.state.location+\"/\"}></iframe>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nimport configData from \"../config/config.json\";\r\nimport { URL } from\"./../utils/api\";\r\n\r\nimport \"./modelEditor.page.css\"\r\n\r\nexport default class ModelEditorPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent0\">\r\n                <iframe className=\"modelEditorFrame\" src={\"model/\"}></iframe>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nimport configData from \"../config/config.json\";\r\nimport { URL } from\"./../utils/api\";\r\n\r\nimport \"./codify.page.css\"\r\n\r\nexport default class CodifyPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent0\">\r\n                <iframe className=\"codifyFrame\" src={\"/codify/\"}></iframe>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./html.component.css\"\r\nimport \"./clusterItem.component.css\"\r\n\r\n\r\n\r\nfunction ClusterJobItem(props) {\r\n    var d = new Date(0);\r\n    const now = Date.now()/1000;\r\n    d.setUTCSeconds(props.lastSyncTime)\r\n    return (\r\n        <div className=\"clusterItemContainer\">\r\n            <div className=\"clusterItem\">\r\n                <div className=\"clusterLeft\">\r\n                    <p className=\"clusterTitle\">{props.systemID} - {props.systemUID}</p>\r\n                    <br/>\r\n                    <p className=\"clusterLeftItem\">Access Address: {props.bindSecure ? \"https://\" : \"http://\"}{props.bindAddress}:{props.bindPort}</p>\r\n                    <br/>\r\n                    <p className=\"clusterLeftItem\">Status: {props.lastSyncTime > now - 120 ? \"Online\" : \"Offline\" }</p>\r\n                </div>\r\n                <div className=\"clusterRight\">\r\n                    <p className=\"clusterRightItem\">Last Sync: {d.toLocaleString()}</p>\r\n                    <br/>\r\n                    <p className=\"clusterRightItem\">Sync Count: {props.syncCount}</p>\r\n                    <br/>\r\n                    <p className=\"clusterRightItem\">Master: {props.master ? \"Yes\" : \"No\"}</p>\r\n                </div>\r\n            </div>       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClusterJobItem;","import React, { Component } from \"react\";\r\nimport ClusterItem from \"./clusterItem.component\"\r\n\r\nimport \"./html.component.css\"\r\nimport \"./clusterList.component.css\"\r\n\r\nfunction ClusterList(props) {\r\n    return (\r\n        <div>\r\n            {props.clusterMembers.map(c => <ClusterItem key={c._id} id={c._id} systemID={c.systemID} systemUID={c.systemUID} lastSyncTime={c.lastSyncTime} master={c.master} syncCount={c.syncCount} bindSecure={c.bindSecure} bindAddress={c.bindAddress} bindPort={c.bindPort} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClusterList;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./html.component.css\"\r\nimport \"./clusterJobItem.component.css\"\r\n\r\n\r\n\r\nfunction ClusterJobItem(props) {\r\n    var d = new Date(0);\r\n    const now = Date.now()/1000;\r\n    d.setUTCSeconds(props.startTime)\r\n    return (\r\n        <div className=\"clusterJobItemContainer\">\r\n            <div className=\"clusterJobItem\">\r\n                <div className=\"clusterJobLeft\">\r\n                    <p className=\"clusterJobTitle\">{props.name}</p>\r\n                    <br/>\r\n                    <p className=\"clusterJobLeftItem\">id: {props.id}</p>\r\n                    <br/>\r\n                    <p className=\"clusterJobLeftItem\">Server Address: {props.server}</p>\r\n                </div>\r\n                <div className=\"clusterJobRight\">\r\n                    <p className=\"clusterJobRightItem\">Start Time: {d.toLocaleString()}</p>\r\n                </div>\r\n            </div>       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClusterJobItem;","import React, { Component } from \"react\";\r\nimport ClusterJobItem from \"./clusterJobItem.component\"\r\n\r\nimport \"./html.component.css\"\r\nimport \"./clusterJobList.component.css\"\r\n\r\nfunction ClusterJobList(props) {\r\n    return (\r\n        <div className=\"clusterJobListContainer\">\r\n            {props.jobs.map(c => <ClusterJobItem key={c.id} id={c.id} server={c.server} createdTime={c.createdTime} name={c.name} startTime={c.startTime} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClusterJobList;","import React, { Component } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport configData from \"./../config/config.json\";\r\nimport { URL } from\"./../utils/api\";\r\n\r\nimport ClusterList from \"./../components/clusterList.component\"\r\nimport ClusterJobList from \"./../components/clusterJobList.component\"\r\n\r\nimport \"../components/html.component.css\"\r\n\r\nimport \"./admin.page.css\"\r\n\r\nfunction apiClusterMembersRefresh() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        credentials: 'include',\r\n    };\r\n    var triggers = fetch(URL()+'cluster/', requestOptions).then(response => {\r\n        if (response.ok) {\r\n            return response.json()\r\n        }\r\n    }).then(json => {\r\n        return json[\"results\"];\r\n    });\r\n    return triggers\r\n}\r\n\r\nfunction apiJobsRefresh() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        credentials: 'include',\r\n    };\r\n    var triggers = fetch(URL()+'workers/', requestOptions).then(response => {\r\n        if (response.ok) {\r\n            return response.json()\r\n        }\r\n    }).then(json => {\r\n        return json[\"results\"];\r\n    });\r\n    return triggers\r\n}\r\n\r\nexport default class AdminPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            clusterMembers : [],\r\n            jobs : []\r\n        }\r\n\r\n        this.mounted = true;\r\n\r\n        this.updateclusterMembers = this.updateClusterMembers.bind(this);\r\n        apiClusterMembersRefresh().then(clusterMembers => {\r\n            this.setState({ clusterMembers : clusterMembers });\r\n            this.updateClusterMembers();\r\n        })\r\n\r\n        this.updateJobs = this.updateJobs.bind(this);\r\n        apiJobsRefresh().then(jobs => {\r\n            this.setState({ jobs : jobs });\r\n            this.updateJobs();\r\n        })\r\n\r\n        this.clearCache = this.clearCache.bind(this);\r\n        this.clearStartChecks = this.clearStartChecks.bind(this);\r\n        this.redistributeCluster = this.redistributeCluster.bind(this);\r\n        this.deleteUnusedObjects = this.deleteUnusedObjects.bind(this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mounted = false;\r\n    }\r\n\r\n    updateJobs() {\r\n        if (this.mounted) {\r\n            setTimeout(() => {\r\n                apiJobsRefresh().then(jobs => {\r\n                    this.setState({ jobs : jobs });\r\n                    this.updateJobs();\r\n                })\r\n            }, 2500 );\r\n        }\r\n    }\r\n\r\n    updateClusterMembers() {\r\n        if (this.mounted) {\r\n            setTimeout(() => {\r\n                apiClusterMembersRefresh().then(clusterMembers => {\r\n                    this.setState({ clusterMembers : clusterMembers });\r\n                    this.updateClusterMembers();\r\n                })\r\n            }, 15000 );\r\n        }\r\n    }\r\n\r\n    clearCache() {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n        };\r\n        var triggers = fetch(URL()+'clearCache/', requestOptions).then(response => {\r\n            if (response.ok) {\r\n                return response.json()\r\n            }\r\n        }).then(json => {\r\n            alert(JSON.stringify(json[\"results\"]));\r\n        });\r\n    }\r\n\r\n    clearStartChecks() {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n        };\r\n        var triggers = fetch(URL()+'clearStartChecks/', requestOptions).then(response => {\r\n            if (response.ok) {\r\n                return response.json()\r\n            }\r\n        }).then(json => {\r\n            alert(JSON.stringify(json));\r\n        });\r\n    }\r\n\r\n    redistributeCluster() {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n        };\r\n        var triggers = fetch(URL()+'cluster/distribute/', requestOptions).then(response => {\r\n            if (response.ok) {\r\n                return response.json()\r\n            }\r\n        }).then(json => {\r\n            alert(JSON.stringify(json));\r\n        });\r\n    }\r\n\r\n    deleteUnusedObjects() {\r\n        this.props.history.push('/cleanup/'); \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent1\">\r\n                <h1>Controls</h1>\r\n                <hr/>\r\n                <button className=\"btn btn-primary btn-block button medium marSmall\" onClick={this.clearCache}>Clear Cache</button>\r\n                <br/>\r\n                <button className=\"btn btn-primary btn-block button medium marSmall\" onClick={this.clearStartChecks}>Clear StartChecks</button>\r\n                <br/>\r\n                <button className=\"btn btn-primary btn-block button medium marSmall\" onClick={this.redistributeCluster}>Redistribute Cluster</button>\r\n                <br/>\r\n                <button className=\"btn btn-primary btn-block button medium marSmall\" onClick={this.deleteUnusedObjects}>Delete Unused Objects</button>\r\n                <br/>\r\n                <br/>\r\n                <h1>Cluster Status</h1>\r\n                <hr/>\r\n                <ClusterList clusterMembers={this.state.clusterMembers} />\r\n                <br/>\r\n                <br/>\r\n                <h1>Job Status</h1>\r\n                <hr/>\r\n                <ClusterJobList jobs={this.state.jobs} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport configData from \"../config/config.json\";\r\n\r\nimport \"./cleanup.page.css\"\r\n\r\nexport default class CleanupPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent0\">\r\n                <iframe className=\"cleanupFrame\" src={configData.url+\"cleanup/\"}></iframe>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route, NavLink } from 'react-router-dom';\r\n\r\nimport { isActiveSession } from './../utils/session';\r\n\r\nimport PublicRoute from './../utils/publicRoute';\r\nimport PrivateRoute from './../utils/privateRoute';\r\nimport {Login, Logout} from './login.component';\r\n\r\nimport StatusPage from '../pages/status.page';\r\nimport MyAccountPage from '../pages/myAccount.page'; \r\nimport ConductsPage from '../pages/conducts.page'; \r\nimport ConductPage from '../pages/conduct.page'; \r\nimport ConductSettingsPage from '../pages/conductSettings.page'; \r\nimport PluginsPage from '../pages/plugins.page'; \r\nimport PluginPage from '../pages/plugin.page'; \r\nimport ModelEditorPage from '../pages/modelEditor.page'; \r\nimport CodifyPage from '../pages/codify.page'; \r\nimport AdminPage from '../pages/admin.page'; \r\nimport CleanupPage from '../pages/cleanup.page';\r\n\r\n\r\n\r\nimport './topbar.component.css'\r\n\r\nfunction Topbar(props) {   \r\n    return (\r\n        <BrowserRouter>\r\n            <div class=\"container\" id=\"topbar\">\r\n                <NavLink exact className=\"home\" activeClassName=\"homeActive\" to=\"/\">jimi</NavLink>\r\n                <NavLink exact className=\"link\" activeClassName=\"active\" to=\"/status\">Status</NavLink>\r\n                <NavLink exact className=\"link\" activeClassName=\"active\" to=\"/conducts\">Conducts</NavLink>\r\n                <NavLink exact className=\"link\" activeClassName=\"active\" to=\"/plugins\">Plugins</NavLink>\r\n                <NavLink exact className=\"link\" activeClassName=\"active\" to=\"/codify\">Codify</NavLink>\r\n                <NavLink exact className=\"link\" activeClassName=\"active\" to=\"/modelEditor\">Model Editor</NavLink>\r\n                <div class=\"container\" id=\"topbar-right\">\r\n                    { isActiveSession ? <NavLink exact className=\"link linkRight\" activeClassName=\"active\" to=\"/logout\">Logout</NavLink> : null }\r\n                    { isActiveSession ? <NavLink exact className=\"link linkRight\" activeClassName=\"active\" to=\"/myAccount\">My Account</NavLink> : null }\r\n                    { isActiveSession ? <NavLink exact className=\"link linkRight\" activeClassName=\"active\" to=\"/administration\">Administration</NavLink> : null }\r\n                </div>\r\n            </div>\r\n            <Switch>\r\n                <PublicRoute path=\"/login\" component={Login} />\r\n                <PrivateRoute path=\"/logout\" component={Logout} />\r\n                <PrivateRoute path=\"/status\" component={StatusPage} />\r\n                <PrivateRoute path=\"/conducts\" component={ConductsPage} />\r\n                <PrivateRoute path=\"/conduct\" component={ConductPage} />\r\n                <PrivateRoute path=\"/conductSettings\" component={ConductSettingsPage} />\r\n                <PrivateRoute path=\"/plugins\" component={PluginsPage} />\r\n                <PrivateRoute path=\"/plugin\" component={PluginPage} />\r\n                <PrivateRoute path=\"/codify\" component={CodifyPage} />\r\n                <PrivateRoute path=\"/modelEditor\" component={ModelEditorPage} />\r\n                <PrivateRoute path=\"/myAccount\" component={MyAccountPage} />\r\n                <PrivateRoute path=\"/administration\" component={AdminPage} />\r\n                <PrivateRoute path=\"/cleanup\" component={CleanupPage} />\r\n                <PrivateRoute path=\"/\" component={StatusPage} />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n  }\r\n  export default Topbar;","import React from 'react';\r\nimport {Container, Row, Col } from \"react-bootstrap\";\r\n\r\nimport Topbar from './components/topbar.component';\r\nimport Tab from './components/tab.component';\r\n \r\nimport './app.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div id=\"pageContent-wrapper\">\r\n      <Topbar />\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './default.css';\r\n\r\nimport App from './App';\r\n \r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}