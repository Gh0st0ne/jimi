{"version":3,"sources":["utils/session.js","components/login.component.js","utils/publicRoute.js","utils/privateRoute.js","components/conductItem.component.js","components/status.component.js","pages/status.page.js","pages/myAccount.page.js","components/conductList.component.js","pages/conducts.page.js","pages/conduct.page.js","pages/conductSettings.page.js","components/pluginItem.component.js","components/pluginList.component.js","pages/plugins.page.js","pages/plugin.page.js","pages/modelEditor.page.js","pages/codify.page.js","components/clusterItem.component.js","components/clusterList.component.js","components/clusterJobItem.component.js","components/clusterJobList.component.js","pages/admin.page.js","pages/cleanup.page.js","components/topbar.component.js","App.js","index.js"],"names":["isActiveSession","sessionStorage","getItem","getSessionCSRF","removeSession","Cookies","remove","setItem","removeItem","setSession","CSRF","Logout","props","requestOptions","method","mode","configData","cosMode","credentials","fetch","url","uri","history","useHistory","setTimeout","push","className","Login","state","username","password","otpRequired","otp","failedLogin","submit","bind","change","event","preventDefault","this","setState","body","JSON","stringify","then","response","ok","catch","error","json","target","value","name","type","checked","hobbies","splice","onSubmit","placeholder","autoComplete","onChange","Component","PublicRoute","component","rest","render","PrivateRoute","PollAuth","to","pathname","from","location","ConductItem","d","Date","setUTCSeconds","lastUpdateTime","href","id","title","toLocaleString","onClick","e","deleteConductClickHandler","StatusItem","now","enabled","startCheck","maxDuration","lastCheck","StatusList","triggers","map","c","_id","apiTriggerStatusRefresh","StatusPage","updateTriggers","clearTimeout","timeoutIDTriggerStatus","MyAccountPage","password1","password2","updated","updateFailed","msg","loading","data","disabled","ConductList","conducts","filter","conduct","toLowerCase","includes","ConductsPage","DeleteConduct","NewConduct","window","confirm","console","log","ConductPage","search","conductID","URLSearchParams","get","test","src","ConductSettingsPage","status","comment","updateStatus","edit","PluginItem","PluginList","plugins","plugin","PluginsPage","PluginPage","pluginName","ModelEditorPage","CodifyPage","ClusterJobItem","lastSyncTime","systemID","systemUID","bindSecure","bindAddress","bindPort","syncCount","master","ClusterList","clusterMembers","startTime","server","ClusterJobList","jobs","createdTime","apiClusterMembersRefresh","apiJobsRefresh","AdminPage","updateclusterMembers","updateClusterMembers","updateJobs","clearCache","clearStartChecks","redistributeCluster","deleteUnusedObjects","timeoutIDclusterMembers","timeoutIDJobs","alert","CleanupPage","Topbar","class","exact","activeClassName","path","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3a889839.chunk.js","sourcesContent":["import { Cookies } from 'react-cookie';\r\n\r\n// return if the session is active\r\nexport const isActiveSession = () => {\r\n  return sessionStorage.getItem('active') || true;\r\n}\r\n\r\n// return session CSRF\r\nexport const getSessionCSRF = () => {\r\n  return sessionStorage.getItem('CSRF') || null;\r\n}\r\n  \r\n// remove the session storage\r\nexport const removeSession = () => {\r\n  const cookies = new Cookies();\r\n  cookies.remove(\"jimiAuth\");\r\n  sessionStorage.setItem('active', false);\r\n  sessionStorage.removeItem('CSRF');\r\n}\r\n  \r\n// set the token and user from the session storage\r\nexport const setSession = (CSRF) => {\r\n  sessionStorage.setItem('active', true);\r\n  sessionStorage.setItem('CSRF', CSRF);\r\n}","import React, { Component } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport configData from \"./../config/config.json\";\r\n\r\nimport { setSession, removeSession, isActiveSession } from './../utils/session';\r\n\r\nimport \"./html.component.css\"\r\nimport \"./login.component.css\"\r\n\r\nexport function PollAuth(props) {\r\n    const history = useHistory();\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        credentials: 'include',\r\n        mode: configData.cosMode\r\n    };\r\n    fetch(configData.url+configData.uri+'auth/poll/', requestOptions).then(response => {\r\n        if (response.ok) {\r\n            return response.json();\r\n        }\r\n        throw response;\r\n    }).then(response => {\r\n        setSession(response[\"CSRF\"]);\r\n    }).catch(error => {\r\n        removeSession();\r\n        history.push('/login');\r\n    });\r\n}\r\n\r\nexport function Logout(props) {   \r\n    const requestOptions = {\r\n        method: 'GET',\r\n        mode: configData.cosMode,\r\n        credentials: 'include'\r\n    };\r\n    fetch(configData.url+configData.uri+'auth/logout/', requestOptions);\r\n    removeSession();\r\n    const history = useHistory()\r\n    setTimeout(() => { history.push('/login'); }, 2500);\r\n    return (\r\n        <div className=\"fullscreen\">\r\n            <h1>jimi</h1>\r\n            <div className=\"outer\">\r\n                <div className=\"inner\">\r\n                    <h3>Successfully logged out</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport class Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: null,\r\n            password: null,\r\n            otpRequired: false,\r\n            otp: null,\r\n            failedLogin: false\r\n        }\r\n        this.submit = this.submit.bind(this);\r\n        this.change = this.change.bind(this);\r\n    }\r\n\r\n    submit(event) {\r\n        event.preventDefault();\r\n        this.setState({ failedLogin: false });\r\n\r\n        if (!this.state.otpRequired) {\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                mode: configData.cosMode,\r\n                body: JSON.stringify({ username: this.state.username, password: this.state.password })\r\n            };\r\n            fetch(configData.url+configData.uri+'auth/', requestOptions).then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                throw response;\r\n            }).then(response => {\r\n                setSession(response[\"CSRF\"]);\r\n                this.props.history.push('/'); \r\n            }).catch(error => { \r\n                this.setState({ otpRequired: true });\r\n            });\r\n        } else {\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                mode: configData.cosMode,\r\n                body: JSON.stringify({ username: this.state.username, password: this.state.password, otp: this.state.otp })\r\n            };\r\n            fetch(configData.url+configData.uri+'auth/', requestOptions).then(response => {\r\n                if (response.ok) return response;\r\n                throw response;\r\n            }).then(response => {\r\n                this.props.history.push('/index'); \r\n            }).catch(error => { \r\n                this.setState({ otpRequired: false });\r\n                this.setState({ failedLogin: true });\r\n            });\r\n        }\r\n    }\r\n\r\n    change(event) {\r\n        const target = event.target;\r\n        var value = target.value;\r\n        const name = target.name;\r\n        if (target.type === 'checkbox') {\r\n            if (target.checked) {\r\n                this.state.hobbies[value] = value;   \r\n            } else {\r\n                this.state.hobbies.splice(value, 1);\r\n            }\r\n        } else {\r\n            this.setState({ [name]: value });\r\n        }   \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"fullscreen\">\r\n                <h1>jimi</h1>\r\n                <div className=\"outer\">\r\n                    <div className={`inner ${!this.state.failedLogin ? \"\" : \"shake\"}`}>\r\n                        <form onSubmit={this.submit}>\r\n                            <h3>Login</h3>\r\n                            {this.state.failedLogin ? <p className=\"failedLoginAlert\"><b>Login details appear to be invalid!</b></p> : <p className=\"failedLoginAlert\"><b>&#160;</b></p> }\r\n                            <div className=\"form-group\">\r\n                                <input type=\"text\" name=\"username\" className=\"form-control textbox\" placeholder=\"Username\" autoComplete=\"off\" onChange={this.change} />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <input type=\"password\" name=\"password\" className=\"form-control textbox\" placeholder=\"password\" autoComplete=\"off\" onChange={this.change} />\r\n                            </div>\r\n\r\n                            {this.state.otpRequired &&\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\" name=\"otp\" className=\"form-control textbox\" placeholder=\"One Time Password\" autoComplete=\"off\" onChange={this.change} />\r\n                                </div>\r\n                            }\r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary btn-block button\">Login</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { PollAuth } from './../components/login.component'\r\n\r\nimport { isActiveSession } from './../utils/session';\r\n \r\n// handle the public routes\r\nfunction PublicRoute({ component: Component, ...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => <Component {...props} /> }\r\n    />\r\n  )\r\n}\r\n \r\nexport default PublicRoute;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { PollAuth } from './../components/login.component'\r\n\r\nimport { isActiveSession } from './../utils/session';\r\n\r\n// handle the private routes\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n  PollAuth();\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => isActiveSession() ? <Component {...props} /> : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />}\r\n    />\r\n  )\r\n}\r\n \r\nexport default PrivateRoute;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./html.component.css\"\r\nimport \"./conductItem.component.css\"\r\n\r\n\r\n\r\nfunction ConductItem(props) {\r\n    var d = new Date(0);\r\n    d.setUTCSeconds(props.lastUpdateTime)\r\n    return (\r\n        <div className=\"conductItemContainer\">\r\n            <div className=\"conductItem\">\r\n                <div className=\"conductLeft\">\r\n                    <a className=\"conductTitle\" href={\"/conduct/?conductID=\"+props.id} title={props.name}>\r\n                        {props.name}\r\n                    </a>\r\n                    <p className=\"conductState\">\r\n                        State: {props.state}\r\n                    </p>\r\n                </div>\r\n                <div className=\"conductRight\">\r\n                    <p className=\"conductLastEdit\">\r\n                        Last Edit: {d.toLocaleString()}\r\n                    </p>\r\n                    <br/>\r\n                    <div className=\"conductRightLinks\">\r\n                        <a className=\"conductDeleteLink\" onClick={(e) => props.deleteConductClickHandler(e,props.id,props.name)}>\r\n                            Delete\r\n                        </a>\r\n                        <p className=\"conductRightOptions\">\r\n                            /\r\n                        </p>\r\n                        <a className=\"conductEditLink\" href={\"/conductSettings/?conductID=\" + props.id + \"&edit=True\"}>\r\n                            Edit\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConductItem;","import React, { Component } from \"react\";\r\nimport ConductItem from \"./conductItem.component\"\r\n\r\nimport \"./html.component.css\"\r\nimport \"./status.component.css\"\r\n\r\nfunction StatusItem(props) {\r\n    const now = Date.now()/1000;\r\n    return (\r\n        <div className=\"statusItemContainer\">\r\n            <div className={`statusItem ${props.enabled ? \"statusItemEnabled\" : \"\"} ${ ((props.startCheck > 0 && props.startCheck + props.maxDuration > now) || props.lastCheck + 2.5 > now) ? \"statusItemRunning\" : \"\"} ${props.enabled && props.startCheck > 0 && props.startCheck + props.maxDuration < now  ? \"statusItemCrashed\" : \"\"} `} title={props.name}>\r\n            </div>       \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction StatusList(props) {\r\n    return (\r\n        <div>\r\n            {props.triggers.map(c => <StatusItem key={c._id} name={c.name} enabled={c.enabled} startCheck={c.startCheck} lastCheck={c.lastCheck} maxDuration={c.maxDuration == 0 ? 60 : c.maxDuration} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatusList;","import React, { Component } from \"react\";\r\n\r\nimport configData from \"./../config/config.json\";\r\n\r\nimport StatusList from \"./../components/status.component\"\r\n\r\nimport \"./status.page.css\"\r\n\r\nfunction apiTriggerStatusRefresh() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        credentials: 'include',\r\n        mode: configData.cosMode\r\n    };\r\n    var triggers = fetch(configData.url+configData.uri+'models/trigger/all/', requestOptions).then(response => {\r\n        if (response.ok) {\r\n            return response.json()\r\n        }\r\n    }).then(json => {\r\n        return json[\"results\"];\r\n    });\r\n    return triggers\r\n}\r\n\r\nexport default class StatusPage extends Component {\r\n    timeoutIDTriggerStatus;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            triggers : []\r\n        }\r\n\r\n        this.updateTriggers = this.updateTriggers.bind(this);\r\n\r\n        apiTriggerStatusRefresh().then(triggers => {\r\n            this.setState({ triggers : triggers });\r\n            this.updateTriggers();\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timeoutIDTriggerStatus);\r\n    }\r\n\r\n    updateTriggers() {\r\n        this.timeoutIDTriggerStatus = setTimeout(() => {\r\n            apiTriggerStatusRefresh().then(triggers => {\r\n                this.setState({ triggers : triggers });\r\n                this.updateTriggers();\r\n            })\r\n        }, 2500 );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent1\">\r\n                <h1>Trigger Status</h1>\r\n                <br/>\r\n                <div className=\"pageCenter-outer\">\r\n                    <div className=\"pageCenter-inner\">\r\n                        <StatusList triggers={this.state.triggers} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport { getSessionCSRF } from './../utils/session';\r\n\r\nimport configData from \"./../config/config.json\";\r\n\r\nimport \"./../components/html.component.css\"\r\nimport \"./myAccount.page.css\"\r\n\r\nexport default class MyAccountPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: null,\r\n            name: null,\r\n            password: \"\",\r\n            password1: \"\",\r\n            password2: \"\",\r\n            updated: false,\r\n            updateFailed: false,\r\n            msg: \"\",\r\n            loading: true\r\n        }\r\n        this.change = this.change.bind(this);\r\n        this.submit = this.submit.bind(this);\r\n\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n            mode: configData.cosMode\r\n        };\r\n        fetch(configData.url+configData.uri+'auth/myAccount/', requestOptions).then(response => {\r\n            if (response.ok) {\r\n                return response.json()\r\n            }\r\n        }).then(json => {\r\n            this.setState({ \"username\" : json[\"username\"], \"name\" : json[\"name\"], \"loading\" : false })\r\n        });\r\n    }\r\n\r\n    submit(event) {\r\n        event.preventDefault();\r\n        if (this.state.password1 !== this.state.password2) {\r\n            this.setState({ msg: \"Passwords do not match\" })\r\n            this.setState({ updateFailed: true });\r\n            setTimeout(() => { this.setState({ updateFailed: false }) }, 1000);\r\n            return\r\n        }\r\n        var data = { CSRF: getSessionCSRF(), name: this.state.name }\r\n        if (this.state.password1 !== \"\")\r\n        {\r\n            data[\"password\"] = this.state.password\r\n            data[\"password1\"] = this.state.password1\r\n        }\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            mode: configData.cosMode,\r\n            body: JSON.stringify(data)\r\n        };\r\n        fetch(configData.url+configData.uri+'auth/myAccount/', requestOptions).then(response => {\r\n            if (response.ok) return response;\r\n            throw response;\r\n        }).then(response => {\r\n            this.setState({ msg: \"Saved\" })\r\n            this.setState({ updated: true })\r\n            setTimeout(() => { this.setState({ updated: false }) }, 1000);\r\n        }).catch(error => { \r\n            this.setState({ msg: \"Error: Could not save data\" })\r\n            this.setState({ updateFailed: true });\r\n        });\r\n    }\r\n\r\n    change(event) {\r\n        this.setState({ updateFailed: false, msg: \"\" });\r\n        const target = event.target;\r\n        var value = target.value;\r\n        const name = target.name;\r\n        if (target.type === 'checkbox') {\r\n            if (target.checked) {\r\n                this.state.hobbies[value] = value;   \r\n            } else {\r\n                this.state.hobbies.splice(value, 1);\r\n            }\r\n        } else {\r\n            this.setState({ [name]: value });\r\n        }   \r\n    }\r\n\r\n    render() {\r\n        return !this.state.loading ? (\r\n            <div className=\"pageContent2\">\r\n                <form onSubmit={this.submit}>\r\n                    <h3>Your Details</h3>\r\n                    <br/><br/>\r\n                    <div className=\"form-group\">\r\n                        General Details\r\n                        <hr/>\r\n                    </div>                    \r\n                    <div className=\"form-group\">\r\n                        Username:\r\n                        <br/>\r\n                        <input type=\"text\" name=\"username\" className=\"form-control textbox\" autoComplete=\"off\" value={this.state.username} disabled=\"true\" onChange={this.change} />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        Name:\r\n                        <br/>\r\n                        <input type=\"text\" name=\"name\" className=\"form-control textbox\" autoComplete=\"off\" value={this.state.name} onChange={this.change} />\r\n                    </div>\r\n                    <br/>\r\n\r\n                    <div className=\"form-group\">\r\n                        Change Password\r\n                        <hr/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        Current Password:\r\n                        <br/>\r\n                        <input type=\"password\" name=\"password\" className=\"form-control textbox\" autoComplete=\"off\" onChange={this.change} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        New Password:\r\n                        <br/>\r\n                        <input type=\"password\" name=\"password1\" className={`form-control textbox ${this.state.msg == \"Passwords do not match\" ? \"alertErrorBorder\" : \"\"}`} autoComplete=\"off\" onChange={this.change} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        Confirm New Password:\r\n                        <br/>\r\n                        <input type=\"password\" name=\"password2\" className={`form-control textbox ${this.state.msg == \"Passwords do not match\" ? \"alertErrorBorder\" : \"\"}`} autoComplete=\"off\" onChange={this.change} />\r\n                    </div>\r\n\r\n                    <br/>\r\n                    <button type=\"submit\" className={`btn btn-primary btn-block button small ${!this.state.updated ? \"\" : \"saved\"} ${!this.state.updateFailed ? \"\" : \"error\"}`}>Update</button>\r\n                    <p className={`resultMessage ${!this.state.updateFailed ? \"alert\" : \"alertError\"} ${!this.state.updated && !this.state.updateFailed ? \"hide\" : \"\"}`}><b>{this.state.msg}</b></p>\r\n                </form>\r\n            </div>\r\n        ) : <span>Loading page...</span>\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport ConductItem from \"./conductItem.component\"\r\n\r\nimport \"./html.component.css\"\r\nimport \"./conductList.component.css\"\r\n\r\nfunction ConductList(props) {\r\n    return (\r\n        <div>\r\n            {props.conducts.filter(conduct => conduct.name.toLowerCase().includes(props.filter.toLowerCase())).map(c => <ConductItem key={c._id} id={c._id} name={c.name} lastUpdateTime={c.lastUpdateTime} state={c.enabled ? \"Enabled\" : \"Disabled\"} deleteConductClickHandler={props.deleteConductClickHandler} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConductList;","import React, { Component } from \"react\";\r\n\r\nimport configData from \"./../config/config.json\";\r\n\r\nimport ConductList from \"./../components/conductList.component\"\r\n\r\nimport \"./conducts.page.css\"\r\n\r\nexport default class ConductsPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            conducts: [],\r\n            filter: \"\"\r\n        }\r\n\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n            mode: configData.cosMode\r\n        };\r\n        fetch(configData.url+configData.uri+'conducts/', requestOptions).then(response => {\r\n            if (response.ok) {\r\n                return response.json()\r\n            }\r\n        }).then(json => {\r\n            this.setState({ conducts : json[\"results\"] });\r\n        });\r\n\r\n        this.change = this.change.bind(this);\r\n        this.DeleteConduct = this.DeleteConduct.bind(this);\r\n        this.NewConduct = this.NewConduct.bind(this);\r\n    }\r\n\r\n    NewConduct() {\r\n        this.props.history.push('/conductSettings/');\r\n    }\r\n\r\n    DeleteConduct(e,id,name) {\r\n        if (window.confirm(\"Please confirm removal of conduct named \"+name)) {\r\n            const requestOptions = {\r\n                method: 'DELETE',\r\n                credentials: 'include',\r\n                mode: configData.cosMode\r\n            };\r\n            fetch(configData.url+configData.uri + 'models/conduct/' + id + \"/\", requestOptions).then(response => {\r\n                if (response.ok) {\r\n                    this.setState({ conducts: this.state.conducts.filter(conduct => conduct._id !== id) });\r\n                }\r\n                throw response;\r\n            }).catch(error => {\r\n                console.log(\"Could not delete conduct: \" + id)\r\n            });\r\n        }\r\n    }\r\n\r\n    change(event) {\r\n        const target = event.target;\r\n        var value = target.value;\r\n        const name = target.name;\r\n        if (target.type === 'checkbox') {\r\n            if (target.checked) {\r\n                this.state.hobbies[value] = value;   \r\n            } else {\r\n                this.state.hobbies.splice(value, 1);\r\n            }\r\n        } else {\r\n            this.setState({ [name]: value });\r\n        }   \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent1\">\r\n                <div>\r\n                    <input type=\"text\" name=\"filter\" className=\"form-control textbox conductSearch\" placeholder=\"Search Conducts\" onChange={this.change} />\r\n                    <button className=\"btn btn-primary btn-block button conductNew\" onClick={this.NewConduct}>+ Create New</button>\r\n                </div>\r\n                <br/>\r\n                <div>\r\n                    <ConductList conducts={this.state.conducts} filter={this.state.filter} deleteConductClickHandler={this.DeleteConduct} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nimport configData from \"./../config/config.json\";\r\n\r\nimport \"./conduct.page.css\"\r\n\r\nexport default class ConductPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            location : \"\"\r\n        }\r\n\r\n        const search = props.location.search;\r\n        const conductID = new URLSearchParams(search).get('conductID');\r\n        if (/^[A-Za-z0-9]+$/.test(conductID)) {\r\n            this.state.location = conductID;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent0\">\r\n                <iframe className=\"conductFrame\" src={configData.url+\"conductEditor/?conductID=\"+this.state.location}></iframe>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nimport { getSessionCSRF } from './../utils/session';\r\n\r\nimport configData from \"./../config/config.json\";\r\n\r\nimport \"./../components/html.component.css\"\r\nimport \"./conductSettings.page.css\"\r\n\r\nexport default class ConductSettingsPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            type: \"New\",\r\n            name: \"\",\r\n            status: false,\r\n            comment: \"\",\r\n            loading: true,\r\n            updateStatus: { \"id\" : null, \"msg\" : \"\" } \r\n        }\r\n        this.change = this.change.bind(this);\r\n        this.submit = this.submit.bind(this);\r\n\r\n        const search = props.location.search;\r\n        const conductID = new URLSearchParams(search).get('conductID');\r\n        const edit = new URLSearchParams(search).get('edit');\r\n        if (edit === \"True\") {\r\n            const requestOptions = {\r\n                method: 'GET',\r\n                credentials: 'include',\r\n                mode: configData.cosMode\r\n            };\r\n            fetch(configData.url+configData.uri+'models/conduct/'+conductID+\"/\", requestOptions).then(response => {\r\n                if (response.ok) {\r\n                    return response.json()\r\n                }\r\n            }).then(json => {\r\n                this.setState({ \"name\" : json[\"name\"], \"status\" : json[\"status\"], \"comment\" : json[\"comment\"], \"type\" : \"Update\", \"loading\" : false })\r\n            });\r\n        } else {\r\n            this.state[\"loading\"] = false;\r\n        }\r\n    }\r\n\r\n    submit(event) {\r\n        event.preventDefault();\r\n        const search = this.props.location.search;\r\n        const conductID = new URLSearchParams(search).get('conductID');\r\n        const edit = new URLSearchParams(search).get('edit');\r\n        var data = { CSRF: getSessionCSRF(), name: this.state.name, comment: this.state.comment, enabled: this.state.enabled }\r\n        if (edit === \"True\") {\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                credentials: 'include',\r\n                mode: configData.cosMode,\r\n                body: JSON.stringify(data)\r\n            };\r\n            fetch(configData.url+configData.uri+'models/conduct/'+conductID+\"/\", requestOptions).then(response => {\r\n                if (response.ok) return response;\r\n                throw response;\r\n            }).then(response => {\r\n                \r\n            }).catch(error => { \r\n                \r\n            });\r\n        } else {\r\n            const requestOptions = {\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                mode: configData.cosMode\r\n            };\r\n            fetch(configData.url+configData.uri+'models/conduct/', requestOptions).then(response => {\r\n                if (response.ok) return response.json();\r\n                throw response;\r\n            }).then(response => {\r\n                // put returns an ID number that can then be used to push the data within the form to - this is a two step process\r\n                requestOptions[\"method\"] = \"POST\"\r\n                requestOptions[\"body\"] = JSON.stringify(data)\r\n                fetch(configData.url+configData.uri+'models/conduct/'+response[\"_id\"]+\"/\", requestOptions).then(response => {\r\n                    if (response.ok) return response;\r\n                    throw response;\r\n                }).then(response => {\r\n                    \r\n                }).catch(error => { \r\n                    \r\n                });\r\n            }).catch(error => { \r\n                \r\n            });\r\n        }\r\n    }\r\n\r\n    change(event) {\r\n        this.setState({ updateFailed: false, msg: \"\" });\r\n        const target = event.target;\r\n        var value = target.value;\r\n        const name = target.name;\r\n        if (target.type === 'checkbox') {\r\n            if (target.checked) {\r\n                this.state.hobbies[value] = value;   \r\n            } else {\r\n                this.state.hobbies.splice(value, 1);\r\n            }\r\n        } else {\r\n            this.setState({ [name]: value });\r\n        }   \r\n    }\r\n\r\n    render() {\r\n        return !this.state.loading ? (\r\n            <div className=\"pageContent2\">\r\n                <form onSubmit={this.submit}>\r\n                    <h3>Conduct Details</h3>\r\n                    <br/><br/>\r\n                    <div className=\"form-group\">\r\n                        General Details\r\n                        <hr/>\r\n                    </div>                    \r\n                    <div className=\"form-group\">\r\n                        Name:\r\n                        <input type=\"text\" name=\"name\" className=\"form-control textbox\" autoComplete=\"off\" value={this.state.name} onChange={this.change} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        Comment:\r\n                        <textarea type=\"text\" name=\"comment\" className=\"form-control textarea\" autoComplete=\"off\" value={this.state.comment} onChange={this.change} />\r\n                    </div>\r\n                    <br/>\r\n\r\n                    <br/>\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-block button small\">{this.state.type}</button>\r\n                </form>\r\n            </div>\r\n        ) : <span>Loading page...</span>\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./html.component.css\"\r\nimport \"./pluginItem.component.css\"\r\n\r\nfunction PluginItem(props) {\r\n    return (\r\n        <div className=\"pluginItemContainer\">\r\n            <a className=\"pluginLink\" href={\"plugin/?pluginName=\"+props.name}>\r\n                <div className=\"pluginItem\">\r\n                    <span className=\"pluginTitle\">{props.name}</span>\r\n                </div>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nPluginItem.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n};\r\n\r\nexport default PluginItem;","import React, { Component } from \"react\";\r\nimport PluginItem from \"./pluginItem.component\"\r\n\r\nimport \"./html.component.css\"\r\nimport \"./pluginList.component.css\"\r\n\r\nfunction PluginList(props) {\r\n    return (\r\n        <div>\r\n            {props.plugins.filter( plugin => plugin.name.toLowerCase().includes(props.filter.toLowerCase())).map( c=> <PluginItem key={c._id} name={c.name} />) }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PluginList;","import React, { Component } from \"react\";\r\n\r\nimport configData from \"./../config/config.json\";\r\n\r\nimport PluginList from \"./../components/pluginList.component\"\r\n\r\nimport \"./plugins.page.css\"\r\n\r\nexport default class PluginsPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            plugins : [],\r\n            filter: \"\"\r\n        }\r\n\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n            mode: configData.cosMode\r\n        };\r\n        fetch(configData.url+configData.uri+'plugins/', requestOptions).then(response => {\r\n            if (response.ok) {\r\n                return response.json()\r\n            }\r\n        }).then(json => {\r\n            this.setState({ plugins : json[\"results\"] });\r\n        });\r\n\r\n        this.change = this.change.bind(this);\r\n    }\r\n\r\n    change(event) {\r\n        const target = event.target;\r\n        var value = target.value;\r\n        const name = target.name;\r\n        if (target.type === 'checkbox') {\r\n\r\n        } else {\r\n            this.setState({ [name]: value });\r\n        }   \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent1\">\r\n                <div>\r\n                    <input type=\"text\" name=\"filter\" className=\"form-control textbox pluginSearch\" placeholder=\"Search Plugins\" onChange={this.change} />\r\n                </div>\r\n                <br/>\r\n                <div className=\"pageCenter-outer\">\r\n                    <div className=\"pageCenter-inner\">\r\n                        <PluginList plugins={this.state.plugins} filter={this.state.filter} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nimport configData from \"./../config/config.json\";\r\n\r\nimport \"./plugin.page.css\"\r\n\r\nexport default class PluginPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            location : \"\"\r\n        }\r\n\r\n        const search = props.location.search;\r\n        const pluginName = new URLSearchParams(search).get('pluginName');\r\n        if (/^[A-Za-z]+$/.test(pluginName)) {\r\n            this.state.location = pluginName;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent0\">\r\n                <iframe className=\"pluginFrame\" src={configData.url+\"plugin/\"+this.state.location+\"/\"}></iframe>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nimport configData from \"../config/config.json\";\r\n\r\nimport \"./modelEditor.page.css\"\r\n\r\nexport default class ModelEditorPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent0\">\r\n                <iframe className=\"modelEditorFrame\" src={configData.url+\"model/\"}></iframe>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nimport configData from \"../config/config.json\";\r\n\r\nimport \"./codify.page.css\"\r\n\r\nexport default class CodifyPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent0\">\r\n                <iframe className=\"codifyFrame\" src={configData.url+\"codify/\"}></iframe>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./html.component.css\"\r\nimport \"./clusterItem.component.css\"\r\n\r\n\r\n\r\nfunction ClusterJobItem(props) {\r\n    var d = new Date(0);\r\n    const now = Date.now()/1000;\r\n    d.setUTCSeconds(props.lastSyncTime)\r\n    return (\r\n        <div className=\"clusterItemContainer\">\r\n            <div className=\"clusterItem\">\r\n                <div className=\"clusterLeft\">\r\n                    <p className=\"clusterTitle\">{props.systemID} - {props.systemUID}</p>\r\n                    <br/>\r\n                    <p className=\"clusterLeftItem\">Access Address: {props.bindSecure ? \"https://\" : \"http://\"}{props.bindAddress}:{props.bindPort}</p>\r\n                    <br/>\r\n                    <p className=\"clusterLeftItem\">Status: {props.lastSyncTime > now - 120 ? \"Online\" : \"Offline\" }</p>\r\n                </div>\r\n                <div className=\"clusterRight\">\r\n                    <p className=\"clusterRightItem\">Last Sync: {d.toLocaleString()}</p>\r\n                    <br/>\r\n                    <p className=\"clusterRightItem\">Sync Count: {props.syncCount}</p>\r\n                    <br/>\r\n                    <p className=\"clusterRightItem\">Master: {props.master ? \"Yes\" : \"No\"}</p>\r\n                </div>\r\n            </div>       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClusterJobItem;","import React, { Component } from \"react\";\r\nimport ClusterItem from \"./clusterItem.component\"\r\n\r\nimport \"./html.component.css\"\r\nimport \"./clusterList.component.css\"\r\n\r\nfunction ClusterList(props) {\r\n    return (\r\n        <div>\r\n            {props.clusterMembers.map(c => <ClusterItem key={c._id} id={c._id} systemID={c.systemID} systemUID={c.systemUID} lastSyncTime={c.lastSyncTime} master={c.master} syncCount={c.syncCount} bindSecure={c.bindSecure} bindAddress={c.bindAddress} bindPort={c.bindPort} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClusterList;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./html.component.css\"\r\nimport \"./clusterJobItem.component.css\"\r\n\r\n\r\n\r\nfunction ClusterJobItem(props) {\r\n    var d = new Date(0);\r\n    const now = Date.now()/1000;\r\n    d.setUTCSeconds(props.startTime)\r\n    return (\r\n        <div className=\"clusterJobItemContainer\">\r\n            <div className=\"clusterJobItem\">\r\n                <div className=\"clusterJobLeft\">\r\n                    <p className=\"clusterJobTitle\">{props.name}</p>\r\n                    <br/>\r\n                    <p className=\"clusterJobLeftItem\">id: {props.id}</p>\r\n                    <br/>\r\n                    <p className=\"clusterJobLeftItem\">Server Address: {props.server}</p>\r\n                </div>\r\n                <div className=\"clusterJobRight\">\r\n                    <p className=\"clusterJobRightItem\">Start Time: {d.toLocaleString()}</p>\r\n                </div>\r\n            </div>       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClusterJobItem;","import React, { Component } from \"react\";\r\nimport ClusterJobItem from \"./clusterJobItem.component\"\r\n\r\nimport \"./html.component.css\"\r\nimport \"./clusterJobList.component.css\"\r\n\r\nfunction ClusterJobList(props) {\r\n    return (\r\n        <div className=\"clusterJobListContainer\">\r\n            {props.jobs.map(c => <ClusterJobItem key={c.id} id={c.id} server={c.server} createdTime={c.createdTime} name={c.name} startTime={c.startTime} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClusterJobList;","import React, { Component } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport configData from \"./../config/config.json\";\r\n\r\nimport ClusterList from \"./../components/clusterList.component\"\r\nimport ClusterJobList from \"./../components/clusterJobList.component\"\r\n\r\nimport \"../components/html.component.css\"\r\n\r\nimport \"./admin.page.css\"\r\n\r\nfunction apiClusterMembersRefresh() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        credentials: 'include',\r\n        mode: configData.cosMode\r\n    };\r\n    var triggers = fetch(configData.url+configData.uri+'cluster/', requestOptions).then(response => {\r\n        if (response.ok) {\r\n            return response.json()\r\n        }\r\n    }).then(json => {\r\n        return json[\"results\"];\r\n    });\r\n    return triggers\r\n}\r\n\r\nfunction apiJobsRefresh() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        credentials: 'include',\r\n        mode: configData.cosMode\r\n    };\r\n    var triggers = fetch(configData.url+configData.uri+'workers/', requestOptions).then(response => {\r\n        if (response.ok) {\r\n            return response.json()\r\n        }\r\n    }).then(json => {\r\n        return json[\"results\"];\r\n    });\r\n    return triggers\r\n}\r\n\r\nexport default class AdminPage extends Component {\r\n    timeoutIDclusterMembers;\r\n    timeoutIDJobs;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            clusterMembers : [],\r\n            jobs : []\r\n        }\r\n\r\n        this.updateclusterMembers = this.updateClusterMembers.bind(this);\r\n        apiClusterMembersRefresh().then(clusterMembers => {\r\n            this.setState({ clusterMembers : clusterMembers });\r\n            this.updateClusterMembers();\r\n        })\r\n\r\n        this.updateJobs = this.updateJobs.bind(this);\r\n        apiJobsRefresh().then(jobs => {\r\n            this.setState({ jobs : jobs });\r\n            this.updateJobs();\r\n        })\r\n\r\n        this.clearCache = this.clearCache.bind(this);\r\n        this.clearStartChecks = this.clearStartChecks.bind(this);\r\n        this.redistributeCluster = this.redistributeCluster.bind(this);\r\n        this.deleteUnusedObjects = this.deleteUnusedObjects.bind(this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timeoutIDclusterMembers);\r\n        clearTimeout(this.timeoutIDJobs);\r\n    }\r\n\r\n    updateJobs() {\r\n        this.timeoutIDJobs = setTimeout(() => {\r\n            apiJobsRefresh().then(jobs => {\r\n                this.setState({ jobs : jobs });\r\n                this.updateJobs();\r\n            })\r\n        }, 2500 );\r\n    }\r\n\r\n    updateClusterMembers() {\r\n        this.timeoutIDclusterMembers = setTimeout(() => {\r\n            apiClusterMembersRefresh().then(clusterMembers => {\r\n                this.setState({ clusterMembers : clusterMembers });\r\n                this.updateClusterMembers();\r\n            })\r\n        }, 15000 );\r\n    }\r\n\r\n    clearCache() {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n            mode: configData.cosMode\r\n        };\r\n        var triggers = fetch(configData.url+configData.uri+'clearCache/', requestOptions).then(response => {\r\n            if (response.ok) {\r\n                return response.json()\r\n            }\r\n        }).then(json => {\r\n            alert(JSON.stringify(json[\"results\"]));\r\n        });\r\n    }\r\n\r\n    clearStartChecks() {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n            mode: configData.cosMode\r\n        };\r\n        var triggers = fetch(configData.url+configData.uri+'clearStartChecks/', requestOptions).then(response => {\r\n            if (response.ok) {\r\n                return response.json()\r\n            }\r\n        }).then(json => {\r\n            alert(JSON.stringify(json));\r\n        });\r\n    }\r\n\r\n    redistributeCluster() {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n            mode: configData.cosMode\r\n        };\r\n        var triggers = fetch(configData.url+configData.uri+'cluster/distribute/', requestOptions).then(response => {\r\n            if (response.ok) {\r\n                return response.json()\r\n            }\r\n        }).then(json => {\r\n            alert(JSON.stringify(json));\r\n        });\r\n    }\r\n\r\n    deleteUnusedObjects() {\r\n        this.props.history.push('/cleanup/'); \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent1\">\r\n                <h1>Controls</h1>\r\n                <hr/>\r\n                <button className=\"btn btn-primary btn-block button medium marSmall\" onClick={this.clearCache}>Clear Cache</button>\r\n                <br/>\r\n                <button className=\"btn btn-primary btn-block button medium marSmall\" onClick={this.clearStartChecks}>Clear StartChecks</button>\r\n                <br/>\r\n                <button className=\"btn btn-primary btn-block button medium marSmall\" onClick={this.redistributeCluster}>Redistribute Cluster</button>\r\n                <br/>\r\n                <button className=\"btn btn-primary btn-block button medium marSmall\" onClick={this.deleteUnusedObjects}>Delete Unused Objects</button>\r\n                <br/>\r\n                <br/>\r\n                <h1>Cluster Status</h1>\r\n                <hr/>\r\n                <ClusterList clusterMembers={this.state.clusterMembers} />\r\n                <br/>\r\n                <br/>\r\n                <h1>Job Status</h1>\r\n                <hr/>\r\n                <ClusterJobList jobs={this.state.jobs} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport configData from \"../config/config.json\";\r\n\r\nimport \"./cleanup.page.css\"\r\n\r\nexport default class CleanupPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent0\">\r\n                <iframe className=\"cleanupFrame\" src={configData.url+\"cleanup/\"}></iframe>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route, NavLink } from 'react-router-dom';\r\n\r\nimport { isActiveSession } from './../utils/session';\r\n\r\nimport PublicRoute from './../utils/publicRoute';\r\nimport PrivateRoute from './../utils/privateRoute';\r\nimport {Login, Logout} from './login.component';\r\n\r\nimport StatusPage from '../pages/status.page';\r\nimport MyAccountPage from '../pages/myAccount.page'; \r\nimport ConductsPage from '../pages/conducts.page'; \r\nimport ConductPage from '../pages/conduct.page'; \r\nimport ConductSettingsPage from '../pages/conductSettings.page'; \r\nimport PluginsPage from '../pages/plugins.page'; \r\nimport PluginPage from '../pages/plugin.page'; \r\nimport ModelEditorPage from '../pages/modelEditor.page'; \r\nimport CodifyPage from '../pages/codify.page'; \r\nimport AdminPage from '../pages/admin.page'; \r\nimport CleanupPage from '../pages/cleanup.page';\r\n\r\n\r\n\r\nimport './topbar.component.css'\r\n\r\nfunction Topbar(props) {   \r\n    return (\r\n        <BrowserRouter>\r\n            <div class=\"container\" id=\"topbar\">\r\n                <NavLink exact className=\"home\" activeClassName=\"homeActive\" to=\"/\">jimi</NavLink>\r\n                <NavLink exact className=\"link\" activeClassName=\"active\" to=\"/status\">Status</NavLink>\r\n                <NavLink exact className=\"link\" activeClassName=\"active\" to=\"/conducts\">Conducts</NavLink>\r\n                <NavLink exact className=\"link\" activeClassName=\"active\" to=\"/plugins\">Plugins</NavLink>\r\n                <NavLink exact className=\"link\" activeClassName=\"active\" to=\"/codify\">Codify</NavLink>\r\n                <NavLink exact className=\"link\" activeClassName=\"active\" to=\"/modelEditor\">Model Editor</NavLink>\r\n                <div class=\"container\" id=\"topbar-right\">\r\n                    { isActiveSession ? <NavLink exact className=\"link linkRight\" activeClassName=\"active\" to=\"/logout\">Logout</NavLink> : null }\r\n                    { isActiveSession ? <NavLink exact className=\"link linkRight\" activeClassName=\"active\" to=\"/myAccount\">My Account</NavLink> : null }\r\n                    { isActiveSession ? <NavLink exact className=\"link linkRight\" activeClassName=\"active\" to=\"/administration\">Administration</NavLink> : null }\r\n                </div>\r\n            </div>\r\n            <Switch>\r\n                <PublicRoute path=\"/login\" component={Login} />\r\n                <PrivateRoute path=\"/logout\" component={Logout} />\r\n                <PrivateRoute path=\"/status\" component={StatusPage} />\r\n                <PrivateRoute path=\"/conducts\" component={ConductsPage} />\r\n                <PrivateRoute path=\"/conduct\" component={ConductPage} />\r\n                <PrivateRoute path=\"/conductSettings\" component={ConductSettingsPage} />\r\n                <PrivateRoute path=\"/plugins\" component={PluginsPage} />\r\n                <PrivateRoute path=\"/plugin\" component={PluginPage} />\r\n                <PrivateRoute path=\"/codify\" component={CodifyPage} />\r\n                <PrivateRoute path=\"/modelEditor\" component={ModelEditorPage} />\r\n                <PrivateRoute path=\"/myAccount\" component={MyAccountPage} />\r\n                <PrivateRoute path=\"/administration\" component={AdminPage} />\r\n                <PrivateRoute path=\"/cleanup\" component={CleanupPage} />\r\n                <PrivateRoute path=\"/\" component={StatusPage} />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n  }\r\n  export default Topbar;","import React from 'react';\r\nimport {Container, Row, Col } from \"react-bootstrap\";\r\n\r\nimport Topbar from './components/topbar.component';\r\nimport Tab from './components/tab.component';\r\n \r\nimport './app.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div id=\"pageContent-wrapper\">\r\n      <Topbar />\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './default.css';\r\n\r\nimport App from './App';\r\n \r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}